name: Build and Push Image
on:
  workflow_call:
    inputs:
      fedora_version:
        description: 'The Fedora release version: 38, 39, 40, etc'
        required: true
        type: string
      brand_name:
        description: "'aurora' or 'bluefin'"
        required: true
        type: string
env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.fedora_version }}
  cancel-in-progress: true

jobs:
  build_container:
    name: image
    runs-on: ubuntu-latest
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        image_flavor:
          - main
          - nvidia
          - asus
          - asus-nvidia
          - framework
          - surface
          - surface-nvidia
        base_name:
          - ${{ inputs.brand_name }}
          - ${{ inputs.brand_name }}-dx
        fedora_version:
          - ${{ inputs.fedora_version }}
        exclude:
          - fedora_version: 38
            image_flavor: asus
          - fedora_version: 38
            image_flavor: asus-nvidia
          - fedora_version: 38
            image_flavor: surface
          - fedora_version: 38
            image_flavor: surface-nvidia
          - fedora_version: 40
            image_flavor: framework

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Matrix Variables
        run: |
          if [[ "${{ matrix.image_flavor }}" == "main" ]]; then
              echo "IMAGE_NAME=${{ matrix.base_name }}" >> $GITHUB_ENV
          else
              echo "IMAGE_NAME=${{ format('{0}-{1}', matrix.base_name, matrix.image_flavor) }}" >> $GITHUB_ENV
          fi
          if [[ "${{ matrix.base_name }}" =~ "bluefin" ]]; then
              echo "BASE_IMAGE_NAME"="silverblue" >> $GITHUB_ENV
          elif [[ "${{ matrix.base_name }}" =~ "aurora" ]]; then
              echo "BASE_IMAGE_NAME"="kinoite" >> $GITHUB_ENV
          fi
          if [[ "${{ matrix.base_name }}" =~ "dx" ]]; then
              echo "TARGET_NAME"="dx" >> $GITHUB_ENV
          else
              echo "TARGET_NAME"="base" >> $GITHUB_ENV
          fi
          if [[ "${{ matrix.image_flavor }}" =~ "asus" ]]; then
              echo "AKMODS_FLAVOR=asus" >> $GITHUB_ENV
          elif [[ "${{ matrix.image_flavor }}" =~ "surface" ]]; then
              echo "AKMODS_FLAVOR=surface" >> $GITHUB_ENV
          else
              echo "AKMODS_FLAVOR=main" >> $GITHUB_ENV
          fi

      - name: Verify base image
        uses: EyeCantCU/cosign-action/verify@v0.2.2
        with:
          containers: ${{ env.BASE_IMAGE_NAME}}-${{ matrix.image_flavor }}:${{ matrix.fedora_version }}

      - name: Verify Chainguard images
        if: matrix.base_name != 'bluefin' && matrix.base_name != 'aurora'
        uses: EyeCantCU/cosign-action/verify@v0.2.2
        with:
          containers: dive, flux, helm, ko, minio, kubectl
          cert-identity: https://github.com/chainguard-images/images/.github/workflows/release.yaml@refs/heads/main
          oidc-issuer: https://token.actions.githubusercontent.com
          registry: cgr.dev/chainguard

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v6

      - name: Check just syntax
        uses: ublue-os/just-action@v1

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          FEDORA_VERSION="${{ matrix.fedora_version }}"

          if [[ "${{ matrix.fedora_version }}" -eq "38" ]]; then
            IS_LATEST_VERSION=false
            IS_STABLE_VERSION=true
            IS_GTS_VERSION=true
          elif [[ "${{ matrix.fedora_version }}" -eq "39" ]]; then
            IS_LATEST_VERSION=true
            IS_STABLE_VERSION=true
            IS_GTS_VERSION=false
          elif [[ "${{ matrix.fedora_version }}" -eq "40" ]]; then
            IS_LATEST_VERSION=false
            IS_STABLE_VERSION=false
            IS_GTS_VERSION=false
          fi

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${FEDORA_VERSION}")
          COMMIT_TAGS+=("${SHA_SHORT}-${FEDORA_VERSION}")
          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              COMMIT_TAGS+=("pr-${{ github.event.number }}")
              COMMIT_TAGS+=("${SHA_SHORT}")
          fi

          BUILD_TAGS=("${FEDORA_VERSION}" "${FEDORA_VERSION}-${TIMESTAMP}")

          if [[ ${{ github.ref_name }} == "testing" ]]; then
             BUILD_TAGS=("${FEDORA_VERSION}-testing" "${FEDORA_VERSION}-testing-${TIMESTAMP}")
             if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
                [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
                 BUILD_TAGS+=("testing")
             elif [[ "${{ matrix.is_gts_version }}" == "true" ]]; then
                 BUILD_TAGS+=("gts-testing")
             fi
          elif [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
               [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              BUILD_TAGS+=("latest")
          elif [[ "${{ matrix.is_gts_version }}" == "true" ]]; then
              BUILD_TAGS+=("gts")
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi
          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Get Current Fedora Version
        id: labels
        shell: bash
        run: |
          set -eo pipefail
          ver=$(skopeo inspect docker://ghcr.io/ublue-os/silverblue-${{ matrix.image_flavor }}:${{ matrix.fedora_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          if [ -z "$ver" ] || [ "null" = "$ver" ]; then
            echo "inspected image version must not be empty or null"
            exit 1
          fi
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
            org.opencontainers.image.description=An interpretation of the Ubuntu spirit built on Fedora technology 
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/bluefin/bluefin/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/120078124?s=200&v=4

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            BASE_IMAGE_NAME=${{ env.BASE_IMAGE_NAME }}
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            IMAGE_FLAVOR=${{ matrix.image_flavor }}
            IMAGE_VENDOR=${{ github.repository_owner }}
            FEDORA_MAJOR_VERSION=${{ matrix.fedora_version }}
            TARGET_BASE=${{ matrix.target_base }}
            AKMODS_FLAVOR=${{ env.AKMODS_FLAVOR }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false
          # TODO(GH-280)
          # extra-args: |
          #   --target=${{ matrix.target_name || matrix.base_name }}
          extra-args: |
            --target=${{ env.TARGET_NAME }}

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.4.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  check:
    name: Check all ${{ inputs.brand_name }} ${{ inputs.fedora_version }} builds successful
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [build_container]
    steps:
      - name: Exit on failure
        if: ${{ needs.build_container.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0

  build_iso:
    name: iso
    needs: [check]
    if: github.ref_name == 'testing'
    # Eventually would be nice for building images in PRs
    #if: ${{ endsWith(github.event.pull_request.title, '[ISO]') }}
    uses: ./.github/workflows/build_iso.yml
    secrets: inherit
