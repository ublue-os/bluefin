name: Anaconda ISO
on:
  workflow_call:
    inputs:
      platform:
        description: "The Platform Architecture"
        default: "['amd64']"
        type: string
      image_flavors:
        description: "JSON string of flavors to build, '[main, nvidia, hwe, hwe-nvidia]'"
        default: "['main', 'nvidia-open']"
        type: string
      stream_name:
        description: "The Fedora Version: gts, stable, or latest"
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.stream_name }}-iso
  cancel-in-progress: true

jobs:
  build-iso:
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm'}}
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(inputs.platform) }}
        image_flavor: ${{ fromJson(inputs.image_flavors) }}
        base_name: ["bluefin"]
        stream_name: ["${{ inputs.stream_name }}"]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install dependencies
        if: matrix.platform == 'arm64'
        run: |
          set -x
          sudo apt update -y
          sudo apt install -y \
            podman

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Setup Just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Check Just Syntax
        shell: bash
        run: |
          just check

      - name: Build ISO
        shell: bash
        env:
          BASE_NAME: ${{ matrix.base_name }}
          STREAM_NAME: ${{ matrix.stream_name }}
          IMAGE_FLAVOR: ${{ matrix.image_flavor }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          IMAGE_NAME="$(just image_name ${BASE_NAME} ${STREAM_NAME} ${IMAGE_FLAVOR})"
          sudo $(command -v just) build-iso "${BASE_NAME}" "${STREAM_NAME}" "${IMAGE_FLAVOR}" "1" "1"
          echo "IMAGE_NAME=${image_name}" >> "${GITHUB_ENV}"
          echo "ISO_BUILD_DIR=${GITHUB_WORKSPACE}/${IMAGE_NAME}_build" >> "${GITHUB_ENV}"
          echo "ISO_NAME=${IMAGE_NAME}-${STREAM_NAME}-$(uname -m).iso" >> "${GITHUB_ENV}"

      - name: Move ISOs to Upload Directory
        id: upload-directory
        shell: bash
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          ISO_UPLOAD_DIR="${GITHUB_WORKSPACE}/upload"
          mkdir "${ISO_UPLOAD_DIR}"
          mv "${ISO_BUILD_DIR}/${ISO_NAME}" "${ISO_UPLOAD_DIR}"
          mv "${ISO_BUILD_DIR}/${ISO_NAME}-CHECKSUM" "${ISO_UPLOAD_DIR}"
          echo "iso-upload-dir=${ISO_UPLOAD_DIR}" >> "${GITHUB_OUTPUT}"

      - name: Upload ISOs and Checksum to Job Artifacts
        if: github.ref_name == 'testing'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ env.ISO_NAME }}
          path: ${{ steps.upload-directory.outputs.iso-upload-dir }}
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
          overwrite: true

      - name: Upload ISOs and Checksum to R2 to Bluefin Bucket
        if: github.ref_name == 'main' && contains(matrix.base_name,'bluefin')
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          SOURCE_DIR: ${{ steps.upload-directory.outputs.iso-upload-dir }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          rclone copy "${SOURCE_DIR}" R2:bluefin
